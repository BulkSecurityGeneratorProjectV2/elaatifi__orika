{"google":"","tagline":"simpler, better and faster Java bean mapping framework","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"\r\n*NEW* We are pleased to announce the release of Orika *1.2.0*! _This version is available on Maven central repository_ \r\n\r\n_see ReleaseNotes for more details_\r\n\r\nAlso, check out our new FAQ\r\n\r\n## What?\r\n\r\nOrika is a Java Bean mapping framework that recursively copies (among other capabilities) data from one object to another. It can be very useful when developing multi-layered applications.\r\n\r\n## Why?\r\n\r\nStruggling with hand coded and reflection-based mappers? Orika can be used to simplify the process of mapping between one object layer and another.\r\n\r\nOur ambition is to build a comprehensive, efficient and robust Java bean mapping solution. Orika focuses on automating as much as possible, while providing customization  through configuration and extension where needed.\r\n\r\nOrika enables the developer to :\r\n * Map complex and deeply structured objects\r\n * \"Flatten\" or \"Expand\" objects by mapping nested properties to top-level properties, and vice versa\r\n * Create mappers on-the-fly, and apply customizations to control some or all of the mapping\r\n * Create converters for complete control over the mapping of a specific set of objects anywhere in the object graph--by type, or even by specific property name\r\n * Handle proxies or enhanced objects (like those of Hibernate, or the various mock frameworks)\r\n * Apply bi-directional mapping with one configuration\r\n * Map to instances of an appropriate concrete class for a target abstract class or interface\r\n\r\n## How?\r\n\r\n\r\nOrika uses byte code generation to create fast mappers with minimal overhead. Take a look at this simple performance test : http://bit.ly/pJ7n6t\r\n\r\n\r\nWant to give Orika a try? Check out the http://code.google.com/p/orika/wiki/GettingStartedGuide.","name":"Orika"}